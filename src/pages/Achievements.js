import React, { useEffect, useState } from 'react';
import { Table, Typography, Spin, Select, Card, Button, Alert } from 'antd';
import axios from 'axios';
import { Link } from 'react-router-dom';

const { Title } = Typography;
const { Option } = Select;

const Achievements = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [directions, setDirections] = useState([]);
  const [criteria, setCriteria] = useState([]);
  const [indicators, setIndicators] = useState([]);
  const [indicatorScore, setIndicatorScore] = useState(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞

  const [selectedDirection, setSelectedDirection] = useState(null);
  const [selectedCriteria, setSelectedCriteria] = useState(null);
  const [selectedIndicator, setSelectedIndicator] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);

        const [directionsRes] = await Promise.all([
          axios.get('https://monitor-mmlp.onrender.com/api/test-directions/')
        ]);

        setDirections(directionsRes.data);
        setLoading(false);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  useEffect(() => {
    if (selectedDirection) {
      const selectedDir = directions.find(dir => dir.id === selectedDirection);
      setCriteria(selectedDir ? selectedDir.criteria : []);
      setSelectedCriteria(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–π –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    }
  }, [selectedDirection, directions]);

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫—Ä–∏—Ç–µ—Ä–∏—è
  useEffect(() => {
    if (selectedCriteria) {
      const selectedCrit = criteria.find(crit => crit.id === selectedCriteria);
      setIndicators(selectedCrit ? selectedCrit.indicators : []);
    } else {
      setIndicators([]);
    }
  }, [selectedCriteria, criteria]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
  const handleIndicatorChange = async (indicatorId) => {
    setSelectedIndicator(indicatorId);

    if (indicatorId) {
      try {
        const response = await axios.get(`https://monitor-mmlp.onrender.com/api/indicator-score/${indicatorId}`);
        setIndicatorScore(response.data.score); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–ª—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–ª–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞:', error);
      }
    } else {
      setIndicatorScore(null); // –û—á–∏—â–∞–µ–º –±–∞–ª–ª—ã, –µ—Å–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
  const handleSubmit = async () => {
    setLoading(true);

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
      const response = await axios.get('https://monitor-mmlp.onrender.com/api/filter-teachers/', {
        params: {
          direction_id: selectedDirection,
          criteria_id: selectedCriteria,
          indicator_id: selectedIndicator
        }
      });

      setData(response.data); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
      setLoading(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
      setLoading(false);
    }
  };

  const columns = [
    {
      title: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      dataIndex: 'username',
      key: 'username',
      render: (text, record) => <Link to={`/users/${record.id}`}>{text}</Link>,
    },
    {
      title: '–û–±—â–∏–π –±–∞–ª–ª',
      dataIndex: 'total_score',
      key: 'total_score',
      sorter: (a, b) => b.total_score - a.total_score,
    },
  ];

  return (
    <div style={{ padding: '20px', maxWidth: '1200px', margin: '0 auto' }}>
      <Title level={2}>üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</Title>

      <Card style={{ marginBottom: '20px' }}>
        <Select
          placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
          style={{ width: 200, marginRight: 10 }}
          onChange={setSelectedDirection}
          allowClear
        >
          {directions.map((dir) => (
            <Option key={dir.id} value={dir.id}>{dir.title}</Option>
          ))}
        </Select>

        <Select
          placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π"
          style={{ width: 200, marginRight: 10 }}
          onChange={setSelectedCriteria}
          value={selectedCriteria}
          disabled={!selectedDirection}
          allowClear
        >
          {criteria.map((crit) => (
            <Option key={crit.id} value={crit.id}>{crit.title}</Option>
          ))}
        </Select>

        <Select
          placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å"
          style={{ width: 200 }}
          onChange={handleIndicatorChange} // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
          value={selectedIndicator}
          disabled={!selectedCriteria}
          allowClear
        >
          {indicators.map((ind) => (
            <Option key={ind.id} value={ind.id}>{ind.title}</Option>
          ))}
        </Select>

        {/* –ö–Ω–æ–ø–∫–∞ —Å–∞–±–º–∏—Ç–∞ */}
        <Button type="primary" onClick={handleSubmit} style={{ marginTop: 10 }}>
          –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
        </Button>
      </Card>

      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –±–∞–ª–ª–æ–º, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
      {indicatorScore !== null && (
        <Card style={{ marginBottom: '20px' }}>
          <Title level={4}>–ë–∞–ª–ª—ã –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä:</Title>
          <div style={{ fontSize: '20px', fontWeight: 'bold' }}>
            {indicatorScore} –±–∞–ª–ª–æ–≤
          </div>
        </Card>
      )}

      {loading ? <Spin size="large" /> : (
        <Table
          columns={columns}
          dataSource={data}
          rowKey="id"
          pagination={{ pageSize: 10 }}
        />
      )}
    </div>
  );
};

export default Achievements;
